# Импортируем библиотеку для построения графиков
import matplotlib.pyplot as plt
import numpy as np  # Добавляем для использования в функции f

# Определяем функцию f(x), которая возвращает 1, если x находится между 0 и 1, иначе возвращает 0.
def f(x):
    return np.where((x > 0) & (x < 1), 1, 0)

# Устанавливаем шаг дискретизации для x
step = 0.01

# Определяем функцию для вычисления свертки 
# step - шаг дискретизации
# a, b - границы интервала, на котором вычисляется свертка
def conv(f, g, step, a, b):
    result = []  # Список для хранения результатов свертки
    x_val = []  # Список для хранения соответствующих значений x
    num_steps = int((b - a) / step)  # Вычисляем количество шагов
    
    # Проходим по всем значениям x на интервале от a до b
    for i in range(num_steps):
        temp = 0  # Переменная для накопления суммы свертки
        # Вычисляем свертку путем суммирования произведений значений функций
        for j in range(i + 1):
            temp += f(j * step) * g(i * step - j * step)
        result.append(temp * step)  # Добавляем полученное значение в список, учитывая шаг
        x_val.append(i * step)  # Добавляем текущее значение x в список
    
    return result, x_val  # Возвращаем результаты и соответствующие значения x

# Вычисляем свертку функции f с самой собой на интервале
y, x = conv(f, f, step, 0, 2)

# Строим график свертки
plt.plot(x, y)
plt.title('График свертки функции f(x)')  # Заголовок графика
plt.xlabel('x')  # Подпись оси X
plt.ylabel('Свертка (f * f)(x)')  # Подпись оси Y
plt.grid(True)  # Включаем сетку на графике
plt.show()  # Отображаем график
